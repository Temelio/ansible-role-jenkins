---

# Common tests between local Vagrant and Travis

- name : Jenkins repository key should exists
  become : True
  apt_key :
    url : "{{ jenkins_repository_key_url }}"
  register : jenkins_apt_key_test
  when :
    - ansible_os_family == "Debian"

- name : Fail if Jenkins repository key reimport change
  fail :
    msg : "Key import task change if we import twice"
  when :
    - ansible_os_family == "Debian"
    - jenkins_apt_key_test.changed

- name : Check if Jenkins repository definition file exists
  stat :
    path : "{{ jenkins_repository_file_prefix }}/{{ jenkins_repository_file }}"
  register : jenkins_apt_file_test

- name : Fail if Jenkins repository file not exists
  fail :
    msg : "Jenkins repository file not exists"
  when :
    - jenkins_apt_file_test.stat.exists == False

- name : Jenkins package should installed
  become : True
  apt :
    name  : "{{ jenkins_package_name }}"
    state : "{{ jenkins_package_state }}"
  register : jenkins_package_test
  when :
    - ansible_os_family == "Debian"

- name : Fail if Jenkins package not installed
  fail :
    msg : "Jenkins package not installed"
  when :
    - jenkins_package_test.changed

- name : Check if Jenkins default config file exists
  stat :
    path : "{{ jenkins_default_cfg_prefix }}/{{ jenkins_default_cfg_file }}"
  register : jenkins_etc_file_test

- name : Fail if Jenkins default config file not exists
  fail :
    msg : "Jenkins default config file not exists"
  when :
    - jenkins_etc_file_test.stat.exists == False

- name : Check if default config file is managed by Ansible
  become  : True
  command : >
    grep -P 'Ansible managed(: Testing)?'
    {{ jenkins_default_cfg_prefix }}/{{ jenkins_default_cfg_file }}
  register : jenkins_etc_managed_test
  changed_when : False
  ignore_errors: True

- name : Fail if ansible_managed string not found in default config file
  fail :
    msg : "Jenkins config file not contains ansible_managed string"
  when : jenkins_etc_managed_test.stdout == ""

- name : Jenkins CLI should exist
  stat :
    path : "{{ jenkins_cli }}"
  register : jenkins_cli_file_test

- name : Fail if Jenkins CLI file not found
  fail :
    msg : "Jenkins CLI file not exists"
  when :
    - jenkins_cli_file_test.stat.exists == False

- name : Jenkins json file for update center
  stat :
    path : "{{ jenkins_update_file }}"
  register : jenkins_update_json_file_test

- name : Fail if Jenkins update json file not found
  fail :
    msg : "Jenkins update file not exists"
  when :
    - jenkins_update_json_file_test.stat.exists == False

- name : Jenkins json file version for update center
  become  : True
  command : >
    sed -n '0,/RE/s/.*war\/\(.*\)\/jenkins.war.*/\1/p'
    {{ jenkins_update_file }}
  register : jenkins_update_json_file_version_test
  changed_when : False

- name : Jenkins war version
  command  : "java -jar {{ jenkins_etc_war_location }} --version"
  register : jenkins_war_version_test
  changed_when : False

- name : Fail if Jenkins update json file too old
  fail :
    msg : "Jenkins update file too old"
  when : >
    {{ jenkins_update_json_file_version_test.stdout
    | version_compare(jenkins_war_version_test.stdout_lines[2], '<') }}

- name : Jenkins homepage should return 200
  register : jenkins_homepage_test
  uri :
    url : "{{ jenkins_base_url }}"
    status_code : 200
    return_content : True

- name : Check homepage not contains error
  fail :
    msg : Jenkins not return expected homepage
  when : "'Welcome to Jenkins!' not in jenkins_homepage_test.content"

- name : Get installed plugins
  become      : True
  become_user : "{{ jenkins_etc_user }}"
  register    : jenkins_list_plugins_test
  shell : >
    java
    -jar {{ jenkins_cli }}
    -s {{ jenkins_base_url }}
    list-plugins
    | awk '{ print $1 }'
  changed_when : False

- name : Check if needed plugins installed
  fail :
    msg : >
      Some needed plugins not installed :
      {{
        jenkins_plugins
        | difference(jenkins_list_plugins_test.stdout_lines)
      }}
  when :
    - "{{
        jenkins_plugins
        | difference(jenkins_list_plugins_test.stdout_lines)
      }}"

- name : Get plugins should be upgraded
  become      : True
  become_user : "{{ jenkins_etc_user }}"
  register    : jenkins_list_plugins_with_upgrade_test
  shell : >
    java
    -jar {{ jenkins_cli }}
    -s {{ jenkins_base_url }}
    list-plugins
    | grep ')$'
    | awk '{ print $1 }'
  changed_when : False

- name : Check if some plugins should be upgraded
  fail :
    msg : >
      Some needed plugins should be upgraded :
      {{ jenkins_list_plugins_with_upgrade_test.stdout_lines }}
  when : jenkins_list_plugins_with_upgrade_test.stdout_lines

